/* There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'... You are given a string colors of length n where colors[i] is the color of the ith piece... Alice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first... 
* Alice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'... She is not allowed to remove pieces that are colored 'B'... 
* Bob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'... He is not allowed to remove pieces that are colored 'A'...
* Alice and Bob cannot remove pieces from the edge of the line...
If a player cannot make a move on their turn, that player loses and the other player wins... Assuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins...
  * Eg 1: String = AAABAAB         Output = True 
  * Eg 2: String = ABBBBBBAAAB     Output = False 
  * Eg 3: String = AAABBBAAA       Output = True     */
import java.util.*;
public class Remove
{
    public boolean RemoveSimilar(String st)
    {
        int alice = 0, bob = 0;
        for(int a = 1; a < st.length() - 1; a++)
        {
            if(st.charAt(a) == 'A' && st.charAt(a+1) == 'A' && st.charAt(a-1) == 'A')
                alice++;    // If Alice removes the colors...
            else if(st.charAt(a) == 'B' && st.charAt(a+1) == 'B' && st.charAt(a-1) == 'B')
                bob++;      // If Bob removes the colors...
        }
        System.out.println("Chances for Alice : "+alice);
        System.out.println("Chance for Bob : "+bob);
        if(alice > bob)    // If Alice has more colors to remove than bob...
            return true;
        return false;      // Otherwise return false...
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String str;
        System.out.print("Enter the sequence of Coloured pieces : ");
        str = sc.next();
        Remove remove = new Remove();    // Object creation...
        System.out.println("The Winner is Alice : "+remove.RemoveSimilar(str));   // Function call...
        sc.close();
    }
}

// Time Complexity  - O(n) time...
// Space Complexity - O(1) space...

/* DEDUCTIONS :- 
 * 1. Since they play optimally, each of them can hold onto the game till they have a sequence to remove when their turns come...
 * 2. The number of Sequences will evaluate the number of turns of ach player...
 * 3. The player which has higher turns will win, since he / she will hold onto the game longer...
*/